import { type NextPage } from "next";
import Head from "next/head";

import { match } from "ts-pattern";
import { SolveStatus } from "../server/types/solve-status";
import { api } from "../utils/api";
const solvedAcClass2 = [
  1978, 9012, 10828, 2798, 2751, 10250, 2609, 1181, 11650, 1920,
];

const Home: NextPage = () => {
  const { data } = api.example.getBoj.useQuery({
    userIds: ["goodboy302", "backchi", "dlwocks31"],
    problemIds: solvedAcClass2,
    submittedAfter: "2023-01-01",
  });

  const goodboy302 =
    data?.find((user) => user.userId === "goodboy302")?.solveStatuses || [];
  const backchi =
    data?.find((user) => user.userId === "backchi")?.solveStatuses || [];

  const dlwocks31 =
    data?.find((user) => user.userId === "dlwocks31")?.solveStatuses || [];

  return (
    <>
      <Head>
        <title>Algorithm Study</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col items-center">
        <h1 className="p-4 text-2xl font-bold">Algorithm Study</h1>
        <table className="table w-full">
          <thead>
            <tr>
              <th className="w-1/6 text-center">Problem</th>
              <th className="w-3/12 text-center">goodboy302</th>
              <th className="w-3/12 text-center">backchi</th>
              <th className="w-4/12 text-center">dlwocks31</th>
            </tr>
          </thead>
          <tbody>
            {solvedAcClass2.map((problemId, i) => (
              <tr key={problemId}>
                <td className="text-center">
                  <a href={`https://boj.kr/${problemId}`}>{problemId}</a>
                </td>
                <SolveItem
                  userId="goodboy302"
                  problemId={problemId}
                  status={goodboy302[i]}
                />
                <SolveItem
                  userId="backchi"
                  problemId={problemId}
                  status={backchi[i]}
                />
                <SolveItem
                  userId="dlwocks31"
                  problemId={problemId}
                  status={dlwocks31[i]}
                />
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </>
  );
};

const SolveItem = ({
  userId,
  problemId,
  status,
}: {
  userId: string;
  problemId: number;
  status: SolveStatus | undefined;
}) => {
  return match(status)
    .with({ isAccepted: true }, (s) => (
      <td className="bg-success text-center">
        <a
          href={`https://www.acmicpc.net/status?problem_id=${problemId}&user_id=${userId}`}
          className="text-gray-700"
        >
          {s.firstAcceptedSubmissionAt}
        </a>
      </td>
    ))
    .with({ hasSubmission: true }, (s) => (
      <td className="bg-error text-center">
        <a
          href={`https://www.acmicpc.net/status?problem_id=${problemId}&user_id=${userId}`}
          className="text-gray-700"
        >
          {s.lastSubmissionAt}
        </a>
      </td>
    ))
    .otherwise(() => <td></td>);
};

export default Home;
